@page "/"

<PageTitle>Sight Words</PageTitle>
<div class="top-row px-4">
    <a href="https://www.flaticon.com" title="icons" style="font-size:x-small">Icons created by nawicon - Flaticon</a>
    <div style="text-align:end">
        Words
        <select @onchange="ChangeWordSet">
            @for(int i=0; i < _sets.Count; i++)
            {
                <option value=@i>
                    @string.Format("Set {0}", i+1)
                </option>
            }
        </select>
    </div>
    
</div>

<div class="hvcenter">
    <p style="font-size: 25vw;">@_words[_wordIndex]</p>
    <div class="center" style="font-size: 16pt">
        <p>@(_wordIndex + 1) of @_words.Count</p>
        <button @onclick="PrevWord"><img width="32" height="32" src=@BackImageUrl /></button>
        <button @onclick="PauseOrPlay"><img width="32" height="32" src=@_stateImage /></button>
    </div>
</div>


@code {
    private const string BackImageUrl = "images/back.png";
    private const string PlayImageUrl = "images/play.png";
    private const string PauseImageUrl = "images/pause.png";

    private static List<List<string>> _sets = new List<List<string>>()
    {
        new()
        {
            "a", "I", "am", "at", "to", "me", "the", "can", "up", "look",
            "he", "by", "big", "like", "my", "you", "it", "him", "on", "if",
            "we", "for", "two", "be", "not", "or", "so", "had", "will", "and",
            "she", "your", "but", "is", "out", "are", "too", "did", "one", "day",
            "just", "what", "food", "little", "school", "some", "have", "make", "was", "in"
        },
        new()
        {
            "go", "see", "dad", "mom", "away", "blue", "come", "down", "find", "funny",
            "help", "three", "here", "got", "play", "red", "jump", "run", "where", "yellow",
            "said", "all", "do", "no", "well", "eat", "now", "went", "will", "four",
            "soon", "get", "our", "that", "white", "ate", "good", "there", "who", "please",
            "they", "black", "pretty", "this", "with", "brown", "into", "ran", "yes", "ride",
        }
    };

    private List<string> _words = _sets[0];

    private Timer? _timer;
    private int _wordIndex;
    private Random _rng = new();
    private bool _paused = true;
    private string _stateImage = PlayImageUrl;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        _timer = new Timer((_) =>
        {
            InvokeAsync(() =>
            {
                if (_paused) return;
                NextWord();
                StateHasChanged();
            });
        }, null, Timeout.Infinite, Timeout.Infinite);
        Pause();
        UpdateState();
    }

    private void Shuffle<T>(IList<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = _rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    private void ChangeWordSet(ChangeEventArgs e)
    {
        Pause();
        _wordIndex = 0;
        if (e.Value is string s)
        {
            _words = _sets[Int32.Parse(s)];
        }
        UpdateState();
    }

    private void PauseOrPlay()
    {
        if (_paused)
        {
            Play();
            NextWord();
        } 
        else
        {
            Pause();
        }
        UpdateState();
    }

    private void PrevWord()
    {
        Pause();
        if(_wordIndex > 0) _wordIndex--;
        UpdateState();
    }

    private void NextWord()
    {
        _wordIndex++;
        if (_wordIndex == _words.Count)
        {
            Shuffle(_words);
            _wordIndex = 0;
        }
    }

    private void Pause()
    {
        _paused = true;
        _timer?.Change(Timeout.Infinite, Timeout.Infinite);
    }

    private void Play()
    {
        _paused = false;
        _timer?.Change(3000, 3000);
    }

    private void UpdateState()
    {
        if (_paused)
        {
            _stateImage = PlayImageUrl;
        }
        else
        {
            _stateImage = PauseImageUrl;
        }
    }
}
