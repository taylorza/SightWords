@page "/"

<PageTitle>Site Words</PageTitle>
<div class="top-row px-4" style="font-size:small">
    <a href="https://www.flaticon.com/free-icons/" title="icons">Icons created by nawicon - Flaticon</a>
</div>
<div class="hvcenter">
    <p style="font-size: 20vw;">@_words[_wordIndex]</p>
    <div class="center" style="font-size: 16pt">
        <p>@(_wordIndex + 1) of @_words.Count</p>
        <button @onclick="PrevWord"><img width="25" height="25" src=@BackImageUrl /></button>
        <button @onclick="PauseOrPlay"><img width="25" height="25" src=@_stateImage /></button>
    </div>
</div>


@code {
    private const string BackImageUrl = "images/back.png";
    private const string PlayImageUrl = "images/play.png";
    private const string PauseImageUrl = "images/pause.png";

    private List<string> _words = new()
    {
        "go", "see", "dad", "mom", "away", "blue", "come", "down", "find", "funny",
        "help", "three", "here", "got", "play", "red", "jump", "run", "where", "yellow",
        "said", "all", "do", "no", "well", "eat", "now", "went", "will", "four",
        "soon", "get", "our", "that", "white", "ate", "good", "there", "who", "please",
        "they", "black", "pretty", "this", "with", "brown", "into", "ran", "yes", "ride",
    };

    private Timer? _timer;
    private int _wordIndex;
    private Random _rng = new();
    private bool _paused = true;
    private string _stateImage = PlayImageUrl;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        _timer = new Timer((_) =>
        {
            InvokeAsync(() =>
            {
                if (_paused) return;
                NextWord();
                StateHasChanged();
            });
        }, null, 0, 3000);
        UpdateState();
    }

    private void Shuffle<T>(IList<T> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = _rng.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    private void PauseOrPlay()
    {
        if (_paused)
        {
            _paused = false;
            NextWord();
        } 
        else
        {
            _paused = true;
        }
        UpdateState();
    }

    private void PrevWord()
    {
        if(_wordIndex > 0) _wordIndex--;
        _paused = true;
        UpdateState();
    }

    private void NextWord()
    {
        _wordIndex++;
        if (_wordIndex == _words.Count)
        {
            Shuffle(_words);
            _wordIndex = 0;
        }
    }

    private void UpdateState()
    {
        if (_paused)
        {
            _stateImage = PlayImageUrl;
        }
        else
        {
            _stateImage = PauseImageUrl;
        }
    }
}
